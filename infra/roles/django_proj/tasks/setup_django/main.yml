---
- name: Copy Django project
  ansible.posix.synchronize:
    src: "{{ local_project_directory }}/backend/"
    dest: "/home/{{ owner }}/backend/"
    rsync_opts:
      - "--exclude={{ local_project_directory }}/backend/.venv"
      - "--exclude={{ local_project_directory }}/backend/db.sqlite3"

- name: Check to see if file contains the ip address of "{{ backend_reverse_proxy_name }}"
  ansible.builtin.command: grep -q '"{{ backend_reverse_proxy_ip_address }}"' "{{ local_project_directory }}/experiment/settings.py"
  register: ip_check
  changed_when: false
  ignore_errors: true

- name: Register file containing ip address as an ansible fact
  ansible.builtin.set_fact:
    file_contains_ip: "{{ backend_reverse_proxy_ip_address in lookup('file', '{{ local_project_directory }}/experiment/settings.py') }}"

- name: Update settings.py
  when: ip_check.rc != 0
  block:
    - name: Update CORS_ALLOWED_ORIGIN
      ansible.builtin.replace:
        path: "{{ backend_host_settings_path }}"
        regexp: '(CORS_ALLOWED_ORIGINS = \[)'
        replace: '\1\n\t"http://{{ backend_reverse_proxy_ip_address }}",'
    - name: Update ALLOWED_HOSTS
      ansible.builtin.replace:
        path: "{{ backend_host_settings_path }}"
        regexp: '(ALLOWED_HOSTS = \[)'
        replace: '\1\n\t"{{ backend_reverse_proxy_ip_address }}",\n\t"{{ backend_reverse_proxy_name }}",'
    - name: Replace existing http address with  http://"{{ backend_reverse_proxy_ip_address }}"
      ansible.builtin.replace:
        path: "{{ backend_host_settings_path }}"
        regexp: '"http://10.2.2[^"]*"'
        replace: '"http://{{ backend_reverse_proxy_ip_address }}"'
      when: not file_contains_ip

- name: Install Django dependencies
  ansible.builtin.pip:
    requirements: "/home/{{ owner }}/backend/requirements.txt"
    virtualenv: "/home/{{ owner }}/backend/venv"
